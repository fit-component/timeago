"use strict";
const React = require('react');
const moment = require('moment');
class Timeago extends React.Component {
    constructor(props) {
        super(props);
        this.state = {};
    }
    componentWillMount() {
        this._isMounted = true;
        this.timeoutId = 0;
    }
    componentDidMount() {
        if (this.props.live) {
            this.tick(true);
        }
    }
    componentDidUpdate(nextProps) {
        if (this.props.live !== nextProps.live || this.props.date !== nextProps.date) {
            if (!this.props.live && this.timeoutId) {
                clearTimeout(this.timeoutId);
                this.timeoutId = undefined;
            }
            this.tick();
        }
    }
    componentWillUnmount() {
        this._isMounted = false;
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
            this.timeoutId = undefined;
        }
    }
    tick(refresh) {
        if (!this._isMounted || !this.props.live) {
            return;
        }
        let period = 1000;
        let then = (new Date(this.props.date)).valueOf();
        let now = Date.now();
        let seconds = Math.round(Math.abs(now - then) / 1000);
        if (seconds < 60) {
            period = 1000;
        }
        else if (seconds < 60 * 60) {
            period = 1000 * 60;
        }
        else if (seconds < 60 * 60 * 24) {
            period = 1000 * 60 * 60;
        }
        else {
            period = 0;
        }
        period = Math.min(Math.max(period, this.props.minPeriod), this.props.maxPeriod);
        if (!!period) {
            this.timeoutId = setTimeout(() => {
                this.tick();
            }, period);
        }
        if (!refresh) {
            this.forceUpdate();
        }
    }
    render() {
        let { component, date, loseTime, loseFormat, label, formatter } = this.props;
        let then = (new Date(date)).valueOf();
        let now = Date.now();
        if (now - then >= loseTime) {
            let fullDate = moment(date);
            let formatString = fullDate.format(loseFormat);
            return React.createElement(component, null, formatString);
        }
        else {
            let seconds = Math.round(Math.abs(now - then) / 1000);
            let suffix = then < now ? label.ago : label.fromNow;
            let value, unit;
            if (seconds < 60) {
                value = Math.round(seconds);
                unit = label.second;
            }
            else if (seconds < 60 * 60) {
                value = Math.round(seconds / 60);
                unit = label.minute;
            }
            else if (seconds < 60 * 60 * 24) {
                value = Math.round(seconds / (60 * 60));
                unit = label.hour;
            }
            else if (seconds < 60 * 60 * 24 * 7) {
                value = Math.round(seconds / (60 * 60 * 24));
                unit = label.day;
            }
            else if (seconds < 60 * 60 * 24 * 30) {
                value = Math.round(seconds / (60 * 60 * 24 * 7));
                unit = label.week;
            }
            else if (seconds < 60 * 60 * 24 * 365) {
                value = Math.round(seconds / (60 * 60 * 24 * 30));
                unit = label.month;
            }
            else {
                value = Math.round(seconds / (60 * 60 * 24 * 365));
                unit = label.year;
            }
            let fullDate = moment(date);
            let newProps = Object.assign({}, null, {
                title: fullDate.format(loseFormat)
            });
            return React.createElement(component, newProps, formatter(value, unit, suffix, then));
        }
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Timeago;
Timeago.defaultProps = {
    date: '',
    live: true,
    component: 'span',
    loseTime: Infinity,
    loseFormat: 'YYYY-MM-DD HH:mm:ss',
    minPeriod: 0,
    maxPeriod: Infinity,
    useChinese: false,
    label: {
        ago: 'ago',
        fromNow: 'from now',
        second: 'second',
        minute: 'minute',
        hour: 'hour',
        day: 'day',
        week: 'week',
        month: 'month',
        year: 'year'
    },
    formatter: (value, unit, suffix) => {
        if (value !== 1) {
            unit += 's';
        }
        return value + ' ' + unit + ' ' + suffix;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE1BQVksS0FBSyxXQUFNLE9BQ3ZCLENBQUMsQ0FENkI7QUFDOUIsTUFBWSxNQUFNLFdBQU0sUUFFeEIsQ0FBQyxDQUYrQjtBQUVoQyxzQkFBcUMsS0FBSyxDQUFDLFNBQVM7SUFLaEQsWUFBWSxLQUFTO1FBQ2pCLE1BQU0sS0FBSyxDQUFDLENBQUE7UUFDWixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQTtJQUNuQixDQUFDO0lBRVMsa0JBQWtCO1FBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFBO1FBQ3RCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFBO0lBQ3RCLENBQUM7SUFFUyxpQkFBaUI7UUFDdkIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDbkIsQ0FBQztJQUNMLENBQUM7SUFFUyxrQkFBa0IsQ0FBQyxTQUFhO1FBQ3RDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDM0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDckMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtnQkFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUE7WUFDOUIsQ0FBQztZQUNELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNmLENBQUM7SUFDTCxDQUFDO0lBRVMs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dGg9XCIuLi8uLi8uLi8uLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaW1lYWdvIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFRpbWVhZ28uUHJvcHMsIFRpbWVhZ28uU3RhdGU+IHtcbiAgICBfaXNNb3VudGVkOmJvb2xlYW5cbiAgICB0aW1lb3V0SWQ6bnVtYmVyXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wczphbnlcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOmFueSkge1xuICAgICAgICBzdXBlcihwcm9wcylcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNvbXBvbmVudFdpbGxNb3VudCgpOnZvaWQge1xuICAgICAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlXG4gICAgICAgIHRoaXMudGltZW91dElkID0gMFxuICAgIH1cblxuICAgIHByb3RlY3RlZCBjb21wb25lbnREaWRNb3VudCgpOnZvaWQge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5saXZlKSB7XG4gICAgICAgICAgICB0aGlzLnRpY2sodHJ1ZSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBjb21wb25lbnREaWRVcGRhdGUobmV4dFByb3BzOmFueSk6dm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmxpdmUgIT09IG5leHRQcm9wcy5saXZlIHx8IHRoaXMucHJvcHMuZGF0ZSAhPT0gbmV4dFByb3BzLmRhdGUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wcm9wcy5saXZlICYmIHRoaXMudGltZW91dElkKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElkKVxuICAgICAgICAgICAgICAgIHRoaXMudGltZW91dElkID0gdW5kZWZpbmVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnRpY2soKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNvbXBvbmVudFdpbGxVbm1vdW50KCk6dm9pZCB7XG4gICAgICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlXG4gICAgICAgIGlmICh0aGlzLnRpbWVvdXRJZCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElkKVxuICAgICAgICAgICAgdGhpcy50aW1lb3V0SWQgPSB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdGljayhyZWZyZXNoPzpib29sZWFuKTp2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc01vdW50ZWQgfHwgIXRoaXMucHJvcHMubGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcGVyaW9kID0gMTAwMFxuXG4gICAgICAgIGxldCB0aGVuID0gKG5ldyBEYXRlKHRoaXMucHJvcHMuZGF0ZSkpLnZhbHVlT2YoKVxuICAgICAgICBsZXQgbm93ID0gRGF0ZS5ub3coKVxuICAgICAgICBsZXQgc2Vjb25kcyA9IE1hdGgucm91bmQoTWF0aC5hYnMobm93IC0gdGhlbikgLyAxMDAwKVxuXG4gICAgICAgIGlmIChzZWNvbmRzIDwgNjApIHtcbiAgICAgICAgICAgIHBlcmlvZCA9IDEwMDBcbiAgICAgICAgfSBlbHNlIGlmIChzZWNvbmRzIDwgNjAgKiA2MCkge1xuICAgICAgICAgICAgcGVyaW9kID0gMTAwMCAqIDYwXG4gICAgICAgIH0gZWxzZSBpZiAoc2Vjb25kcyA8IDYwICogNjAgKiAyNCkge1xuICAgICAgICAgICAgcGVyaW9kID0gMTAwMCAqIDYwICogNjBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlcmlvZCA9IDBcbiAgICAgICAgfVxuXG4gICAgICAgIHBlcmlvZCA9IE1hdGgubWluKE1hdGgubWF4KHBlcmlvZCwgdGhpcy5wcm9wcy5taW5QZXJpb2QpLCB0aGlzLnByb3BzLm1heFBlcmlvZClcblxuICAgICAgICBpZiAoISFwZXJpb2QpIHtcbiAgICAgICAgICAgIHRoaXMudGltZW91dElkID0gc2V0VGltZW91dCgoKT0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnRpY2soKVxuICAgICAgICAgICAgfSwgcGVyaW9kKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFyZWZyZXNoKSB7XG4gICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKTpSZWFjdC5SZWFjdEVsZW1lbnQ8YW55PiB7XG4gICAgICAgIGxldCB7Y29tcG9uZW50LCBkYXRlLCBsb3NlVGltZSwgbG9zZUZvcm1hdCwgbGFiZWwsIGZvcm1hdHRlcn0gPSB0aGlzLnByb3BzXG5cbiAgICAgICAgbGV0IHRoZW4gPSAobmV3IERhdGUoZGF0ZSkpLnZhbHVlT2YoKVxuICAgICAgICBsZXQgbm93ID0gRGF0ZS5ub3coKVxuXG4gICAgICAgIGlmIChub3cgLSB0aGVuID49IGxvc2VUaW1lKSB7IC8vIOWPi+WlveaXtumXtOWkseaViOS6hlxuICAgICAgICAgICAgbGV0IGZ1bGxEYXRlID0gbW9tZW50KGRhdGUpXG4gICAgICAgICAgICBsZXQgZm9ybWF0U3RyaW5nID0gZnVsbERhdGUuZm9ybWF0KGxvc2VGb3JtYXQpXG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgbnVsbCwgZm9ybWF0U3RyaW5nKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHNlY29uZHMgPSBNYXRoLnJvdW5kKE1hdGguYWJzKG5vdyAtIHRoZW4pIC8gMTAwMClcbiAgICAgICAgICAgIGxldCBzdWZmaXggPSB0aGVuIDwgbm93ID8gbGFiZWwuYWdvIDogbGFiZWwuZnJvbU5vd1xuICAgICAgICAgICAgbGV0IHZhbHVlOm51bWJlciwgdW5pdDpzdHJpbmdcblxuICAgICAgICAgICAgaWYgKHNlY29uZHMgPCA2MCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZChzZWNvbmRzKVxuICAgICAgICAgICAgICAgIHVuaXQgPSBsYWJlbC5zZWNvbmRcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2Vjb25kcyA8IDYwICogNjApIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQoc2Vjb25kcyAvIDYwKVxuICAgICAgICAgICAgICAgIHVuaXQgPSBsYWJlbC5taW51dGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2Vjb25kcyA8IDYwICogNjAgKiAyNCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZChzZWNvbmRzIC8gKDYwICogNjApKVxuICAgICAgICAgICAgICAgIHVuaXQgPSBsYWJlbC5ob3VyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlY29uZHMgPCA2MCAqIDYwICogMjQgKiA3KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKHNlY29uZHMgLyAoNjAgKiA2MCAqIDI0KSlcbiAgICAgICAgICAgICAgICB1bml0ID0gbGFiZWwuZGF5XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlY29uZHMgPCA2MCAqIDYwICogMjQgKiAzMCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZChzZWNvbmRzIC8gKDYwICogNjAgKiAyNCAqIDcpKVxuICAgICAgICAgICAgICAgIHVuaXQgPSBsYWJlbC53ZWVrXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlY29uZHMgPCA2MCAqIDYwICogMjQgKiAzNjUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQoc2Vjb25kcyAvICg2MCAqIDYwICogMjQgKiAzMCkpXG4gICAgICAgICAgICAgICAgdW5pdCA9IGxhYmVsLm1vbnRoXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZChzZWNvbmRzIC8gKDYwICogNjAgKiAyNCAqIDM2NSkpXG4gICAgICAgICAgICAgICAgdW5pdCA9IGxhYmVsLnllYXJcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGZ1bGxEYXRlID0gbW9tZW50KGRhdGUpXG4gICAgICAgICAgICBsZXQgbmV3UHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCBudWxsLCB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGZ1bGxEYXRlLmZvcm1hdChsb3NlRm9ybWF0KVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBuZXdQcm9wcywgZm9ybWF0dGVyKHZhbHVlLCB1bml0LCBzdWZmaXgsIHRoZW4pKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUgVGltZWFnbyB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgICAgIGxpdmU6Ym9vbGVhblxuICAgICAgICBkYXRlOmFueVxuICAgICAgICBtaW5QZXJpb2Q6bnVtYmVyXG4gICAgICAgIG1heFBlcmlvZDpudW1iZXJcbiAgICAgICAgY29tcG9uZW50OnN0cmluZ1xuICAgICAgICBsb3NlVGltZTpudW1iZXJcbiAgICAgICAgbG9zZUZvcm1hdDpzdHJpbmdcbiAgICAgICAgbGFiZWw6e1xuICAgICAgICAgICAgYWdvOnN0cmluZ1xuICAgICAgICAgICAgZnJvbU5vdzpzdHJpbmdcbiAgICAgICAgICAgIHNlY29uZDpzdHJpbmdcbiAgICAgICAgICAgIG1pbnV0ZTpzdHJpbmdcbiAgICAgICAgICAgIGhvdXI6c3RyaW5nXG4gICAgICAgICAgICBkYXk6c3RyaW5nXG4gICAgICAgICAgICB3ZWVrOnN0cmluZ1xuICAgICAgICAgICAgbW9udGg6c3RyaW5nXG4gICAgICAgICAgICB5ZWFyOnN0cmluZ1xuICAgICAgICB9XG4gICAgICAgIGZvcm1hdHRlcjpGdW5jdGlvblxuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgU3RhdGUge1xuXG4gICAgfVxufVxuXG5UaW1lYWdvLmRlZmF1bHRQcm9wcyA9IHtcbiAgICAvLyBAZGVzYyDpnIDopoHlpITnkIbnmoTml7bpl7Qs5Y+v5Lul5piv5LiA5LiqZGF0ZeWvueixoSxVVEPlrZfnrKbkuLLmiJbogIXmmK/ml7bpl7TmiLNcbiAgICBkYXRlOiAnJyxcblxuICAgIC8vIEBkZXNjIOaYr+WQpui3n+maj+aXtumXtOiHquWKqOWPmOWMllxuICAgIGxpdmU6IHRydWUsXG5cbiAgICAvLyBAZGVzYyDlpJblsYJkb23moIfnrb5cbiAgICBjb21wb25lbnQ6ICdzcGFuJyxcblxuICAgIC8vIEBkZXNjIOWkmuS5heS7peWQjueahOaXtumXtOS8muWkseaViCzlpLHmlYjmjIfnmoTmmK/kuI3lho3mmL7npLrlj4vlpb3ml7bpl7Qs55u05o6l5pi+56S6IFlZWVktTU0tREQgSEg6bW06c3NcbiAgICBsb3NlVGltZTogSW5maW5pdHksXG5cbiAgICAvLyBAZGVzYyDlpLHmlYjml7bpl7TnmoTmoLzlvI/ljJbnsbvlnotcbiAgICBsb3NlRm9ybWF0OiAnWVlZWS1NTS1ERCBISDptbTpzcycsXG5cbiAgICAvLyBAZGVzYyDnu4Tku7blnKjmm7TmlrDliY3nrYnlvoXnmoTmnIDlsJHnp5LmlbBcbiAgICBtaW5QZXJpb2Q6IDAsXG5cbiAgICAvLyBAZGVzYyDmr4/pmpTlpJrkuYXmm7TmlrDkuIDmrKHml7bpl7Qs6buY6K6k5peg6ZmQ5aSnXG4gICAgbWF4UGVyaW9kOiBJbmZpbml0eSxcblxuICAgIC8vIEBkZXNjIOWQr+eUqOS4reaWh+aUr+aMgVxuICAgIHVzZUNoaW5lc2U6IGZhbHNlLFxuXG4gICAgLy8gQGRlc2Mg5a6a5Yi25ZCE57G75o+Q56S66K+t5Y+lXG4gICAgbGFiZWw6IHtcbiAgICAgICAgYWdvOiAnYWdvJyxcbiAgICAgICAgZnJvbU5vdzogJ2Zyb20gbm93JyxcbiAgICAgICAgc2Vjb25kOiAnc2Vjb25kJyxcbiAgICAgICAgbWludXRlOiAnbWludXRlJyxcbiAgICAgICAgaG91cjogJ2hvdXInLFxuICAgICAgICBkYXk6ICdkYXknLFxuICAgICAgICB3ZWVrOiAnd2VlaycsXG4gICAgICAgIG1vbnRoOiAnbW9udGgnLFxuICAgICAgICB5ZWFyOiAneWVhcidcbiAgICB9LFxuXG4gICAgLy8gQGRlc2Mg5qC85byP5YyWXG4gICAgZm9ybWF0dGVyOiAodmFsdWU6bnVtYmVyLCB1bml0OnN0cmluZywgc3VmZml4OnN0cmluZyk9PiB7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gMSkge1xuICAgICAgICAgICAgdW5pdCArPSAncydcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWUgKyAnICcgKyB1bml0ICsgJyAnICsgc3VmZml4XG4gICAgfVxufSJdfQ==