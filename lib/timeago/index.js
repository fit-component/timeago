"use strict";
const React = require('react');
const moment = require('moment');
const Module = require('./module');
class Timeago extends React.Component {
    constructor(props) {
        super(props);
        this.state = {};
    }
    componentWillMount() {
        this._isMounted = true;
        this.timeoutId = 0;
    }
    componentDidMount() {
        if (this.props.live) {
            this.tick(true);
        }
    }
    componentDidUpdate(nextProps) {
        if (this.props.live !== nextProps.live || this.props.date !== nextProps.date) {
            if (!this.props.live && this.timeoutId) {
                clearTimeout(this.timeoutId);
                this.timeoutId = undefined;
            }
            this.tick();
        }
    }
    componentWillUnmount() {
        this._isMounted = false;
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
            this.timeoutId = undefined;
        }
    }
    tick(refresh) {
        if (!this._isMounted || !this.props.live) {
            return;
        }
        let period = 1000;
        let then = (new Date(this.props.date)).valueOf();
        let now = Date.now();
        let seconds = Math.round(Math.abs(now - then) / 1000);
        if (seconds < 60) {
            period = 1000;
        }
        else if (seconds < 60 * 60) {
            period = 1000 * 60;
        }
        else if (seconds < 60 * 60 * 24) {
            period = 1000 * 60 * 60;
        }
        else {
            period = 0;
        }
        period = Math.min(Math.max(period, this.props.minPeriod), this.props.maxPeriod);
        if (!!period) {
            this.timeoutId = setTimeout(() => {
                this.tick();
            }, period);
        }
        if (!refresh) {
            this.forceUpdate();
        }
    }
    render() {
        let { component, date, loseTime, loseFormat, label, formatter } = this.props;
        let then = (new Date(date)).valueOf();
        let now = Date.now();
        if (now - then >= loseTime) {
            let fullDate = moment(date);
            let formatString = fullDate.format(loseFormat);
            return React.createElement(component, null, formatString);
        }
        else {
            let seconds = Math.round(Math.abs(now - then) / 1000);
            let suffix = then < now ? label.ago : label.fromNow;
            let value, unit;
            if (seconds < 60) {
                value = Math.round(seconds);
                unit = label.second;
            }
            else if (seconds < 60 * 60) {
                value = Math.round(seconds / 60);
                unit = label.minute;
            }
            else if (seconds < 60 * 60 * 24) {
                value = Math.round(seconds / (60 * 60));
                unit = label.hour;
            }
            else if (seconds < 60 * 60 * 24 * 7) {
                value = Math.round(seconds / (60 * 60 * 24));
                unit = label.day;
            }
            else if (seconds < 60 * 60 * 24 * 30) {
                value = Math.round(seconds / (60 * 60 * 24 * 7));
                unit = label.week;
            }
            else if (seconds < 60 * 60 * 24 * 365) {
                value = Math.round(seconds / (60 * 60 * 24 * 30));
                unit = label.month;
            }
            else {
                value = Math.round(seconds / (60 * 60 * 24 * 365));
                unit = label.year;
            }
            let fullDate = moment(date);
            let newProps = Object.assign({}, null, {
                title: fullDate.format(loseFormat)
            });
            return React.createElement(component, newProps, formatter(value, unit, suffix, then));
        }
    }
}
Timeago.defaultProps = new Module.TimeagoModule.Props();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Timeago;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE1BQVksS0FBSyxXQUFNLE9BQ3ZCLENBQUMsQ0FENkI7QUFDOUIsTUFBWSxNQUFNLFdBQU0sUUFDeEIsQ0FBQyxDQUQrQjtBQUNoQyxNQUFZLE1BQU0sV0FBTSxVQUV4QixDQUFDLENBRmlDO0FBRWxDLHNCQUFxQyxLQUFLLENBQUMsU0FBUztJQUtoRCxZQUFZLEtBQVM7UUFDakIsTUFBTSxLQUFLLENBQUMsQ0FBQTtRQUNaLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFBO0lBQ25CLENBQUM7SUFFUyxrQkFBa0I7UUFDeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUE7UUFDdEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUE7SUFDdEIsQ0FBQztJQUVTLGlCQUFpQjtRQUN2QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNuQixDQUFDO0lBQ0wsQ0FBQztJQUVTLGtCQUFrQixDQUFDLFNBQW9DO1FBQzdELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDM0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDckMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtnQkFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUE7WUFDOUIsQ0FBQztZQUNELElBQUksQ0FBQyxJ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WUFDM0IsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFO2dCQUNuQyxLQUFLLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7YUFDckMsQ0FBQyxDQUFBO1lBRUYsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUN6RixDQUFDO0lBQ0wsQ0FBQztBQUNMLENBQUM7QUFySFUsb0JBQVksR0FBOEIsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFBO0FBSHJGO3lCQXdIQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tICdtb21lbnQnXG5pbXBvcnQgKiBhcyBNb2R1bGUgZnJvbSAnLi9tb2R1bGUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVhZ28gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8TW9kdWxlLlRpbWVhZ29Nb2R1bGUuUHJvcHMsIE1vZHVsZS5UaW1lYWdvTW9kdWxlLlN0YXRlPiB7XG4gICAgX2lzTW91bnRlZDpib29sZWFuXG4gICAgdGltZW91dElkOm51bWJlclxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHM6TW9kdWxlLlRpbWVhZ29Nb2R1bGUuUHJvcHMgPSBuZXcgTW9kdWxlLlRpbWVhZ29Nb2R1bGUuUHJvcHMoKVxuXG4gICAgY29uc3RydWN0b3IocHJvcHM6YW55KSB7XG4gICAgICAgIHN1cGVyKHByb3BzKVxuICAgICAgICB0aGlzLnN0YXRlID0ge31cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY29tcG9uZW50V2lsbE1vdW50KCk6dm9pZCB7XG4gICAgICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWVcbiAgICAgICAgdGhpcy50aW1lb3V0SWQgPSAwXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNvbXBvbmVudERpZE1vdW50KCk6dm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmxpdmUpIHtcbiAgICAgICAgICAgIHRoaXMudGljayh0cnVlKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNvbXBvbmVudERpZFVwZGF0ZShuZXh0UHJvcHM6TW9kdWxlLlRpbWVhZ29Nb2R1bGUuUHJvcHMpOnZvaWQge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5saXZlICE9PSBuZXh0UHJvcHMubGl2ZSB8fCB0aGlzLnByb3BzLmRhdGUgIT09IG5leHRQcm9wcy5kYXRlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvcHMubGl2ZSAmJiB0aGlzLnRpbWVvdXRJZCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZClcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVvdXRJZCA9IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50aWNrKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBjb21wb25lbnRXaWxsVW5tb3VudCgpOnZvaWQge1xuICAgICAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZVxuICAgICAgICBpZiAodGhpcy50aW1lb3V0SWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZClcbiAgICAgICAgICAgIHRoaXMudGltZW91dElkID0gdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRpY2socmVmcmVzaD86Ym9vbGVhbik6dm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5faXNNb3VudGVkIHx8ICF0aGlzLnByb3BzLmxpdmUpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBlcmlvZCA9IDEwMDBcblxuICAgICAgICBsZXQgdGhlbiA9IChuZXcgRGF0ZSh0aGlzLnByb3BzLmRhdGUpKS52YWx1ZU9mKClcbiAgICAgICAgbGV0IG5vdyA9IERhdGUubm93KClcbiAgICAgICAgbGV0IHNlY29uZHMgPSBNYXRoLnJvdW5kKE1hdGguYWJzKG5vdyAtIHRoZW4pIC8gMTAwMClcblxuICAgICAgICBpZiAoc2Vjb25kcyA8IDYwKSB7XG4gICAgICAgICAgICBwZXJpb2QgPSAxMDAwXG4gICAgICAgIH0gZWxzZSBpZiAoc2Vjb25kcyA8IDYwICogNjApIHtcbiAgICAgICAgICAgIHBlcmlvZCA9IDEwMDAgKiA2MFxuICAgICAgICB9IGVsc2UgaWYgKHNlY29uZHMgPCA2MCAqIDYwICogMjQpIHtcbiAgICAgICAgICAgIHBlcmlvZCA9IDEwMDAgKiA2MCAqIDYwXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZXJpb2QgPSAwXG4gICAgICAgIH1cblxuICAgICAgICBwZXJpb2QgPSBNYXRoLm1pbihNYXRoLm1heChwZXJpb2QsIHRoaXMucHJvcHMubWluUGVyaW9kKSwgdGhpcy5wcm9wcy5tYXhQZXJpb2QpXG5cbiAgICAgICAgaWYgKCEhcGVyaW9kKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCk9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50aWNrKClcbiAgICAgICAgICAgIH0sIHBlcmlvZClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcmVmcmVzaCkge1xuICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCk6UmVhY3QuUmVhY3RFbGVtZW50PGFueT4ge1xuICAgICAgICBsZXQge2NvbXBvbmVudCwgZGF0ZSwgbG9zZVRpbWUsIGxvc2VGb3JtYXQsIGxhYmVsLCBmb3JtYXR0ZXJ9ID0gdGhpcy5wcm9wc1xuXG4gICAgICAgIGxldCB0aGVuID0gKG5ldyBEYXRlKGRhdGUpKS52YWx1ZU9mKClcbiAgICAgICAgbGV0IG5vdyA9IERhdGUubm93KClcblxuICAgICAgICBpZiAobm93IC0gdGhlbiA+PSBsb3NlVGltZSkgeyAvLyDlj4vlpb3ml7bpl7TlpLHmlYjkuoZcbiAgICAgICAgICAgIGxldCBmdWxsRGF0ZSA9IG1vbWVudChkYXRlKVxuICAgICAgICAgICAgbGV0IGZvcm1hdFN0cmluZyA9IGZ1bGxEYXRlLmZvcm1hdChsb3NlRm9ybWF0KVxuXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIG51bGwsIGZvcm1hdFN0cmluZylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBzZWNvbmRzID0gTWF0aC5yb3VuZChNYXRoLmFicyhub3cgLSB0aGVuKSAvIDEwMDApXG4gICAgICAgICAgICBsZXQgc3VmZml4ID0gdGhlbiA8IG5vdyA/IGxhYmVsLmFnbyA6IGxhYmVsLmZyb21Ob3dcbiAgICAgICAgICAgIGxldCB2YWx1ZTpudW1iZXIsIHVuaXQ6c3RyaW5nXG5cbiAgICAgICAgICAgIGlmIChzZWNvbmRzIDwgNjApIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQoc2Vjb25kcylcbiAgICAgICAgICAgICAgICB1bml0ID0gbGFiZWwuc2Vjb25kXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlY29uZHMgPCA2MCAqIDYwKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKHNlY29uZHMgLyA2MClcbiAgICAgICAgICAgICAgICB1bml0ID0gbGFiZWwubWludXRlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlY29uZHMgPCA2MCAqIDYwICogMjQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQoc2Vjb25kcyAvICg2MCAqIDYwKSlcbiAgICAgICAgICAgICAgICB1bml0ID0gbGFiZWwuaG91clxuICAgICAgICAgICAgfSBlbHNlIGlmIChzZWNvbmRzIDwgNjAgKiA2MCAqIDI0ICogNykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZChzZWNvbmRzIC8gKDYwICogNjAgKiAyNCkpXG4gICAgICAgICAgICAgICAgdW5pdCA9IGxhYmVsLmRheVxuICAgICAgICAgICAgfSBlbHNlIGlmIChzZWNvbmRzIDwgNjAgKiA2MCAqIDI0ICogMzApIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQoc2Vjb25kcyAvICg2MCAqIDYwICogMjQgKiA3KSlcbiAgICAgICAgICAgICAgICB1bml0ID0gbGFiZWwud2Vla1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzZWNvbmRzIDwgNjAgKiA2MCAqIDI0ICogMzY1KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKHNlY29uZHMgLyAoNjAgKiA2MCAqIDI0ICogMzApKVxuICAgICAgICAgICAgICAgIHVuaXQgPSBsYWJlbC5tb250aFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQoc2Vjb25kcyAvICg2MCAqIDYwICogMjQgKiAzNjUpKVxuICAgICAgICAgICAgICAgIHVuaXQgPSBsYWJlbC55ZWFyXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBmdWxsRGF0ZSA9IG1vbWVudChkYXRlKVxuICAgICAgICAgICAgbGV0IG5ld1Byb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgbnVsbCwge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBmdWxsRGF0ZS5mb3JtYXQobG9zZUZvcm1hdClcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgbmV3UHJvcHMsIGZvcm1hdHRlcih2YWx1ZSwgdW5pdCwgc3VmZml4LCB0aGVuKSlcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=